
public class Maximum_subarray {

	static int findMaxCrossingSubarray(int ar[], int low, int mid, int high)
	  {
	    int leftSum = Integer.MIN_VALUE;
	    int sum = 0;
	    

	    for (int i=mid; i>=low; i--)
	    {
	      sum = sum+ar[i];
	      if (sum>leftSum)
	        leftSum = sum;
	    }
	    
	    int rightSum = Integer.MIN_VALUE;
	    sum = 0;

	    for (int j=mid+1; j<=high; j++)
	    {
	      sum=sum+ar[j];
	      if (sum>rightSum)
	        rightSum = sum;
	    }

	    
	    return (leftSum+rightSum);
	  }
	
	static int findMaximumSubSubarray(int ar[], int low, int high)
	  {
	    if (high == low) // only one element in an array
	    {
	      return ar[high];
	    }
	    else
	    {
	    	    int mid = (high+low)/2;

	    	    int leftsum = findMaximumSubSubarray(ar, low, mid);
	    
	    	    int rightsum = findMaximumSubSubarray(ar, mid+1, high);
	    	    
	    	    int crosssum = findMaxCrossingSubarray(ar, low, mid, high);

	    	    if((leftsum>=rightsum) && (leftsum>=crosssum))
	    	    	return leftsum;
	    	    else if((rightsum>=leftsum) && (rightsum>=crosssum))
	    	    	return rightsum;
	    	    return crosssum;
	    }
	  }
	
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		int a[] = {-2, -5, 6, -2, -3, 1, 5, -6};
	    System.out.println(findMaximumSubSubarray(a, 0, 7));

	}

}
